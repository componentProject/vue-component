# 构建 storybook 站点并将其部署到 GitHub Pages 的示例工作流程
name: 发布storybook

on:
  # 在针对 `main` 分支的推送上运行。如果你
  # 使用 `master` 分支作为默认分支，请将其更改为 `master`
  push:
    paths: ['.storybook/**','.stories/**','src/components/**','github/workflows/deploy-storybook.yml']
    branches: [main]

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出main分支代码
        uses: actions/checkout@v4
        with:
          ref: main
          # 如果未启用 lastUpdated，则不需要
          fetch-depth: 0
      # 如果使用 pnpm，请取消此区域注释
      - name: 设置并安装指定pnpm版本
        uses: pnpm/action-setup@v3
        with:
          version: 9
      # end
      # 如果使用 Bun，请取消注释
      # - name: 设置并安装Bun
      #   uses: oven-sh/setup-bun@v1
      - name: 设置并安装指定node版本
        uses: actions/setup-node@v4
        with:
          node-version: 18
          # 缓存依赖,npm / pnpm / yarn,根据pnpm-lock.yaml等其他文件
          # cache: pnpm
      - name: 配置页面
        uses: actions/configure-pages@v4
      - name: 下载依赖
        # npm ci / pnpm install / yarn install / bun install
        run: pnpm install
      - name: 打包storybook
        # npm run docs:build / pnpm docs:build / yarn docs:build / bun run docs:build
        run: pnpm storybook:build
      - name: 推送代码
        run: |
          cd .storybook/dist
          git init
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "deploy"
          git remote add origin https://github.com/componentProject/vue-component-storybook.git
          git push -f origin main
               
